#include "stdafx.h"
#include <iostream>
#include <string.h>

typedef char TItem[5];

struct TNode {
	TItem Info;
	TNode * Left;
	TNode * Right;
};
typedef TNode * PNode;

PNode InitTree(void) {
	return 0;
};

void InputFakeTree(TItem Item, PNode & Head) {
	if (Head == NULL || strcmp(Item,Head->Info) <= 0) {
		PNode Q;
		Q= new TNode;
		strcpy(Q->Info,Item);
		Q->Left=NULL;
		Q->Right=Head;
		Head = Q;
	}
	else {
		PNode R, P, Q;
		R = Head;
		P = Head->Right;
		while (P != NULL && strcmp(Item,P->Info) > 0) {
			R = P;
			P = P->Right;
		}
		Q= new TNode;
		strcpy(Q->Info,Item);
		Q->Left=NULL;
		Q->Right=R->Right;
		R->Right=Q;
	}
}

void  getElement(TItem & Item, PNode Head, int Num) {
	int i=1;
	bool f;
	PNode R, P;
	R = Head;
	P = Head->Right;
	while (Num != i && R->Right != NULL) {
		i++;
		R = P;
		P = P->Right;
	} 
	strcpy(Item,R->Info);
}

PNode BuildBalancedFindTree(PNode Head, int NumMin, int NumMax) {
	PNode Q;
	Q= new TNode;
	if (NumMax-NumMin > 0) {
		getElement(Q->Info, Head, NumMin+(NumMax-NumMin+1)/2);
		Q->Left=BuildBalancedFindTree(Head, NumMin, NumMin+(NumMax-NumMin+1)/2-1);
		Q->Right=BuildBalancedFindTree(Head, NumMin+(NumMax-NumMin+1)/2+1, NumMax);
	}
	else {
		getElement(Q->Info, Head, NumMax);
		Q->Left=NULL;
		Q->Right=NULL;
	}
	return Q;
}

void PrintTree(PNode t, int h) {
	if (t!=NULL) {
		PrintTree(t->Right, h+2);
		for (int i=1; i<=h; i++) printf("   ");
		puts(t->Info);
		PrintTree(t->Left, h+2);
	};
};

void DeleteSeries(TItem & str) {
	int j,k=0;
	TItem str2;
	str2[0] = str[0];
	for (j=1; j < strlen(str); j++) {
		if (str[j] != str[j-1]) {
			k++;
			str2[k] = str[j];
		}
	}
	str2[k+1]='\0';
	strcpy(str,str2);
}

void TreeDeleteSeries(PNode Node) {
	if (Node != NULL) {
		DeleteSeries(Node->Info);
		TreeDeleteSeries(Node->Left);
		TreeDeleteSeries(Node->Right);
	}
}

void DeleteTree(PNode & P) {
	if (P!=NULL) {
		if (P->Left != NULL)
			DeleteTree(P->Left);
		if (P->Right != NULL)
			DeleteTree(P->Right);
		delete P;
		P=NULL;
	};
};

void ScanTree(PNode t, PNode & P, int h) {
	if (t!=NULL) {
		ScanTree(t->Right, P, h+2);
		InputFakeTree(t->Info,P);
		ScanTree(t->Left, P, h+2);
	};
};

int main() {
	FILE * t;
	TItem inputStr;
	PNode root = InitTree();
	PNode root2 = InitTree();
	int k = 0, n=2;
	if ((t=fopen("data.txt","r"))==NULL) {
		printf ("File not open");
		exit(1);
	}
	printf("The contents of the file \"data.txt\":\n");
	while (fscanf(t,"%4s",&inputStr)>0) {
		k++;
		InputFakeTree(inputStr,root);
		printf("%4s ", inputStr);
	}
	printf("\n");
	while (k > n-1)
		n *= 2;
	if (k == n-1) {
		printf("-------------------[ STEP 1 ]-------------------\n");
		PrintTree(root,0);
		printf("-------------------[ STEP 2 ]-------------------\n");
		root=BuildBalancedFindTree(root,1,k);
		PrintTree(root,0);
		printf("-------------------[ STEP 3 ]-------------------\n");
		TreeDeleteSeries(root);
		ScanTree(root,root2,0);
		PrintTree(root2,0);
		printf("-------------------[ STEP 4 ]-------------------\n");
		root=BuildBalancedFindTree(root2,1,k);
		PrintTree(root,0);
	}
	else
		printf("Invalid number of items\n");
	DeleteTree(root);
	DeleteTree(root2);
	fclose(t);
    system("pause");
}
