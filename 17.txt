#include "stdafx.h"
#include "math.h"
#include <iostream>

const int M_SIZE = 10;
typedef double TMatrix[M_SIZE][M_SIZE];
typedef double TVector[M_SIZE];
void FillMatrix(TMatrix A);
void PrintMatrix(TMatrix A);
void GetVector(TVector V, TMatrix A);
void PrintVector(TVector V);
double G(TVector V);

int main()
{
	double u;
	TMatrix A;
	TVector X;
	FillMatrix(A);
	PrintMatrix(A);
	GetVector(X, A);
	PrintVector(X);
	u=G(X);
	printf("G= %9.5f\n", u);
	system("pause");
	return 0;
}

void FillMatrix(TMatrix A)
{
	for (int i=0; i < M_SIZE; i++)
		for (int j=0; j < M_SIZE; j++)
			A[i][j]= (abs(5-j)+1)/(pow(i+j-5.0, 2)+5);
}

void PrintMatrix(TMatrix A)
{
	printf("Matrix\n");
	for (int i=0; i < M_SIZE; i++) {
		for (int j=0; j < M_SIZE; j++)
			printf ("%7.2f ", A[i][j]);
		printf("\n");
	}
}

void GetVector(TVector V, TMatrix A)
{
	double max_sum=0, sum, temp;
	int max_index=0, i, j;
	bool f;
	for (j=0; j < M_SIZE; j++)
		max_sum = max_sum + A[0][j];
	for (i=1; i < M_SIZE; i++) {
		sum = 0;
		for (j=0; j < M_SIZE; j++)
			sum = sum + A[i][j];
		if (sum > max_sum) {
			max_index = i;
			max_sum = sum;
		}
	}
	for (j=0; j < M_SIZE; j++)
		V[j] = A[max_index][j];
	do {
		f = false;
		for (j=0; j < M_SIZE-1; j++)
			if (V[j] > V[j+1]) {
				temp = V[j];
                V[j] = V[j+1];
                V[j+1] = temp;
				f = true;
			}
	} while (f);
}

void PrintVector(TVector V)
{
	printf("Vector\n");
	for (int i=0; i < M_SIZE; i++)
		printf ("%5.2f ",V[i]);
	printf("\n");
}

double G(TVector V) {
	double g, max = 0;
	for (int i=0; i <= M_SIZE-2; i++)
	{
		g = abs(V[i+1]) - abs(V[i]);
		if (g > max)
			max = g;
	}
	return max;
}